<!DOCTYPE html>
<html lang="en" class="scroll-p-16 snap-y snap-mandatory">
	<head>
		<%- include('./partials/head'); %>
		<link
			rel="stylesheet"
			href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
			integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
			crossorigin="" />
		<link
			rel="stylesheet"
			href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
		<script
			src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
			integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
			crossorigin=""></script>
		<script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
	</head>
	<body class="font-sans text-stone-900 bg-gray-100 relative">
		<%- include('./partials/navbar'); %>

		<div
			id="sos-active"
			class="hidden fixed z-50 top-0 left-0 w-full h-full bg-red-500 flex flex-col items-center">
			<div class="m-auto text-center">
				<p class="text-white font-bold text-2xl mb-7">
					It looks like you're in an emergency.
				</p>
				<p class="text-white mb-7">
					System detected a SOS emergency at <span id="time"></span>
				</p>
				<p id="countDown" class="text-6xl text-white mb-7"></p>
				<p
					class="underline text-white mb-7 text-lg cursor-pointer"
					id="cancel">
					I'm okay.
				</p>
			</div>
		</div>

		<div
			class="flex overflow-hidden relative w-full h-full-with-nav snap-start">
			<div id="important" class="z-20">
				<div class="fixed bottom-4 left-4">
					<div
						class="w-24 h-24 flex items-center justify-center bg-white rounded-full shadow-md z-10">
						<div
							class="w-20 h-20 bg-red-500 rounded-full flex items-center justify-center cursor-pointer select-none"
							id="sos">
							<p class="text-white font-bold">SOS</p>
						</div>
					</div>
				</div>
			</div>

			<div class="p-8 overflow-hidden flex flex-col h-full w-full">
				<h1 class="mx-4 my-4 text-3xl">Today</h1>
				<hr class="my-4 mb-8 border-0 border-b-2 border-stone-600" />
				<div class="flex flex-col flex-1 overflow-y-auto gap-4  ">
					<% orders.forEach((order) => { %>
					<div
						class="min-h-16 p-4 flex flex-col border border-stone-600 gap-4">
						<div class="flex flex-row justify-between">
							<p>#<%= order._id %></p>
							<p>To <%= order.user_data.username %></p>
						</div>
						<div class="flex flex-col">
							<p class="text-left">Address</p>
							<hr class="border-0 border-b border-stone-600" />
						</div>
						<div class="flex flex-col lg:flex-row px-4 gap-4 justify-between">
							<div class="flex flex-col gap-2">
								<p class="text-sm lg:text-base">
									<span class="font-bold">Address:</span>
									<%= order.user_data.address.address %>
								</p>
								<p class="text-sm lg:text-base">
									<span class="font-bold">City:</span>
									<%= order.user_data.address.city %>
								</p>
								<p class="text-sm lg:text-base">
									<span class="font-bold">Province:</span>
									<%= order.user_data.address.province %>
								</p>
								<p class="text-sm lg:text-base">
									<span class="font-bold">Postal Code:</span>
									<%= order.user_data.address.zip_code %>
								</p>
							</div>
							<div
								id="map_<%= order._id %>"
								class="min-h-[360px] h-auto w-full lg:h-full lg:w-auto aspect-video border border-stone-700"
								hidden></div>
						</div>
						<div class="flex flex-row justify-between">
							<p class="text-sm lg:text-base">
								<span class="font-bold">Payment Method:</span>
								<%= order.payment_method === 'credit' ? 'Credit Card': 'Cash' %>
							</p>
							<button
								class="bg-primary px-4 py-2 border border-stone-700"
								onclick="createMap('map_<%= order._id %>', '<%= order.user_data.address.latitude %>', '<%= order.user_data.address.longitude %>')">
								Open Map
							</button>
						</div>
					</div>
					<% }) %>
				</div>
			</div>
		</div>
		<script>
			//Get time
			const timeSpan = document.getElementById("time");
			const currentTime = new Date();
			const hours = currentTime.getHours();
			const minutes = currentTime.getMinutes();
			const ampm = hours >= 12 ? "PM" : "AM";
			const formattedTime = `${hours % 12}:${minutes
				.toString()
				.padStart(2, "0")} ${ampm}`;
			timeSpan.textContent = formattedTime;

			//SOS button
			const sosDiv = document.getElementById("sos");
			const importantDiv = document.getElementById("sos-active");
			let clickCount = 0;
			let timer = 7;
			let interval1;

			sosDiv.addEventListener("click", () => {
				clickCount++;
				console.log(`Click count: ${clickCount}`);

				if (clickCount === 1) {
					interval1 = setInterval(() => {
						timer--;
						console.log(`Timer: ${timer}`);

						if (timer === 0) {
							clearInterval(interval1);
							timer = 7;
							clickCount = 0;
							console.log(
								"Timer expired, resetting click count and timer."
							);
						}
					}, 1000);
				}

				if (clickCount === 3) {
					importantDiv.classList.remove("hidden");
					clickCount = 0;
					clearInterval(interval1);
					timer = 10;
					console.log(
						"Clicked 3 times within 7 seconds, stopping timer, showing importantDiv, and starting the 10-second countdown."
					);

					//SOS count down
					const countDownParagraph =
						document.getElementById("countDown");
					let remainingSeconds = 10;
					countDownParagraph.innerText = remainingSeconds;
					const countDownInterval = setInterval(() => {
						remainingSeconds--;
						console.log(`Timer 2: ${remainingSeconds}`);
						countDownParagraph.innerText = remainingSeconds;
						if (remainingSeconds === 0) {
							clearInterval(countDownInterval);
							remainingSeconds = 10;
							countDownParagraph.innerText = "";
							console.log("Timer 2 expired, calling 911.");
							//sos call
							countDownParagraph.innerText = "911";
							alert("911");
						} else {
							const cancelBtn = document.getElementById("cancel");
							cancelBtn.addEventListener("click", () => {
								importantDiv.classList.add("hidden");
								clearInterval(countDownInterval);
								remainingSeconds = 10;
								console.log(
									"Cancel button clicked, hiding importantDiv and resetting timer 2."
								);
							});
						}
					}, 1000);
				}
			});
			async function createMap(id, lat_u, lon_u) {
				navigator.geolocation.getCurrentPosition(
					(position) => {
						const lat = position.coords.latitude;
						const lon = position.coords.longitude;
						document.getElementById(id).hidden = false;
						var map = L.map(id).setView([lat, lon], 13);
						L.tileLayer(
							"https://tile.openstreetmap.org/{z}/{x}/{y}.png",
							{
								maxZoom: 19,
								attribution:
									'&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
							}
						).addTo(map);
						L.Routing.control({
							waypoints: [
								L.latLng(lat, lon),
								L.latLng(lat_u, lon_u),
							],
						}).addTo(map);
						L.marker([lat, lon]).addTo(map);
						L.marker([lat_u, lon_u]).addTo(map);
					},
					(error) => {
						alert("Please enable location services.");
					}
				);
			}
		</script>
	</body>
</html>
